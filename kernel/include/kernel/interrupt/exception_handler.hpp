#ifndef _EXCEPTION_HANDLER_ALLOCATOR_HPP_
#define _EXCEPTION_HANDLER_ALLOCATOR_HPP_

#include <kernel/interface_type.hpp>
#include <kernel/interrupt/exception.hpp>

#define EXCEPTION_HANDLER_MAXCOUNT 64

#define EXCEPTION_HANDLER_PTR(handler_num) exception::handlers::handler##handler_num
#define EXCEPTION_HANDLER_FUNCTION(handler_num) __attribute__ ((naked)) void handler##handler_num(void);

#ifdef USE_HARDWARE_INTERRUPT

#define EXCEPTION_HANDLER_ARRAY \
ptr_t handlers[EXCEPTION_HANDLER_MAXCOUNT] = {\
    (ptr_t)EXCEPTION_HANDLER_PTR(0)  , (ptr_t)EXCEPTION_HANDLER_PTR(1)  , (ptr_t)EXCEPTION_HANDLER_PTR(2)  , (ptr_t)EXCEPTION_HANDLER_PTR(3)  , \
    (ptr_t)EXCEPTION_HANDLER_PTR(4)  , (ptr_t)EXCEPTION_HANDLER_PTR(5)  , (ptr_t)EXCEPTION_HANDLER_PTR(6)  , (ptr_t)EXCEPTION_HANDLER_PTR(7)  , \
    (ptr_t)EXCEPTION_HANDLER_PTR(8)  , (ptr_t)EXCEPTION_HANDLER_PTR(9)  , (ptr_t)EXCEPTION_HANDLER_PTR(10) , (ptr_t)EXCEPTION_HANDLER_PTR(11) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(12) , (ptr_t)EXCEPTION_HANDLER_PTR(13) , (ptr_t)EXCEPTION_HANDLER_PTR(14) , (ptr_t)EXCEPTION_HANDLER_PTR(15) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(16) , (ptr_t)EXCEPTION_HANDLER_PTR(17) , (ptr_t)EXCEPTION_HANDLER_PTR(18) , (ptr_t)EXCEPTION_HANDLER_PTR(19) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(20) , (ptr_t)EXCEPTION_HANDLER_PTR(21) , (ptr_t)EXCEPTION_HANDLER_PTR(22) , (ptr_t)EXCEPTION_HANDLER_PTR(23) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(24) , (ptr_t)EXCEPTION_HANDLER_PTR(25) , (ptr_t)EXCEPTION_HANDLER_PTR(26) , (ptr_t)EXCEPTION_HANDLER_PTR(27) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(28) , (ptr_t)EXCEPTION_HANDLER_PTR(29) , (ptr_t)EXCEPTION_HANDLER_PTR(30) , (ptr_t)EXCEPTION_HANDLER_PTR(31) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(32) , (ptr_t)EXCEPTION_HANDLER_PTR(33) , (ptr_t)EXCEPTION_HANDLER_PTR(34) , (ptr_t)EXCEPTION_HANDLER_PTR(35) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(36) , (ptr_t)EXCEPTION_HANDLER_PTR(37) , (ptr_t)EXCEPTION_HANDLER_PTR(38) , (ptr_t)EXCEPTION_HANDLER_PTR(39) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(40) , (ptr_t)EXCEPTION_HANDLER_PTR(41) , (ptr_t)EXCEPTION_HANDLER_PTR(42) , (ptr_t)EXCEPTION_HANDLER_PTR(43) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(44) , (ptr_t)EXCEPTION_HANDLER_PTR(45) , (ptr_t)EXCEPTION_HANDLER_PTR(46) , (ptr_t)EXCEPTION_HANDLER_PTR(47) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(48) , (ptr_t)EXCEPTION_HANDLER_PTR(49) , (ptr_t)EXCEPTION_HANDLER_PTR(50) , (ptr_t)EXCEPTION_HANDLER_PTR(51) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(52) , (ptr_t)EXCEPTION_HANDLER_PTR(53) , (ptr_t)EXCEPTION_HANDLER_PTR(54) , (ptr_t)EXCEPTION_HANDLER_PTR(55) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(56) , (ptr_t)EXCEPTION_HANDLER_PTR(57) , (ptr_t)EXCEPTION_HANDLER_PTR(58) , (ptr_t)EXCEPTION_HANDLER_PTR(59) , \
    (ptr_t)EXCEPTION_HANDLER_PTR(60) , (ptr_t)EXCEPTION_HANDLER_PTR(61) , (ptr_t)EXCEPTION_HANDLER_PTR(62) , (ptr_t)EXCEPTION_HANDLER_PTR(63) , \
};

namespace exception {
    namespace handlers {
        EXCEPTION_HANDLER_FUNCTION(0);
        EXCEPTION_HANDLER_FUNCTION(1);
        EXCEPTION_HANDLER_FUNCTION(2);
        EXCEPTION_HANDLER_FUNCTION(3);
        EXCEPTION_HANDLER_FUNCTION(4);
        EXCEPTION_HANDLER_FUNCTION(5);
        EXCEPTION_HANDLER_FUNCTION(6);
        EXCEPTION_HANDLER_FUNCTION(7);
        EXCEPTION_HANDLER_FUNCTION(8);
        EXCEPTION_HANDLER_FUNCTION(9);
        EXCEPTION_HANDLER_FUNCTION(10);
        EXCEPTION_HANDLER_FUNCTION(11);
        EXCEPTION_HANDLER_FUNCTION(12);
        EXCEPTION_HANDLER_FUNCTION(13);
        EXCEPTION_HANDLER_FUNCTION(14);
        EXCEPTION_HANDLER_FUNCTION(15);
        EXCEPTION_HANDLER_FUNCTION(16);
        EXCEPTION_HANDLER_FUNCTION(17);
        EXCEPTION_HANDLER_FUNCTION(18);
        EXCEPTION_HANDLER_FUNCTION(19);
        EXCEPTION_HANDLER_FUNCTION(20);
        EXCEPTION_HANDLER_FUNCTION(21);
        EXCEPTION_HANDLER_FUNCTION(22);
        EXCEPTION_HANDLER_FUNCTION(23);
        EXCEPTION_HANDLER_FUNCTION(24);
        EXCEPTION_HANDLER_FUNCTION(25);
        EXCEPTION_HANDLER_FUNCTION(26);
        EXCEPTION_HANDLER_FUNCTION(27);
        EXCEPTION_HANDLER_FUNCTION(28);
        EXCEPTION_HANDLER_FUNCTION(29);
        EXCEPTION_HANDLER_FUNCTION(30);
        EXCEPTION_HANDLER_FUNCTION(31);
        EXCEPTION_HANDLER_FUNCTION(32);
        EXCEPTION_HANDLER_FUNCTION(33);
        EXCEPTION_HANDLER_FUNCTION(34);
        EXCEPTION_HANDLER_FUNCTION(35);
        EXCEPTION_HANDLER_FUNCTION(36);
        EXCEPTION_HANDLER_FUNCTION(37);
        EXCEPTION_HANDLER_FUNCTION(38);
        EXCEPTION_HANDLER_FUNCTION(39);
        EXCEPTION_HANDLER_FUNCTION(40);
        EXCEPTION_HANDLER_FUNCTION(41);
        EXCEPTION_HANDLER_FUNCTION(42);
        EXCEPTION_HANDLER_FUNCTION(43);
        EXCEPTION_HANDLER_FUNCTION(44);
        EXCEPTION_HANDLER_FUNCTION(45);
        EXCEPTION_HANDLER_FUNCTION(46);
        EXCEPTION_HANDLER_FUNCTION(47);
        EXCEPTION_HANDLER_FUNCTION(48);
        EXCEPTION_HANDLER_FUNCTION(49);
        EXCEPTION_HANDLER_FUNCTION(50);
        EXCEPTION_HANDLER_FUNCTION(51);
        EXCEPTION_HANDLER_FUNCTION(52);
        EXCEPTION_HANDLER_FUNCTION(53);
        EXCEPTION_HANDLER_FUNCTION(54);
        EXCEPTION_HANDLER_FUNCTION(55);
        EXCEPTION_HANDLER_FUNCTION(56);
        EXCEPTION_HANDLER_FUNCTION(57);
        EXCEPTION_HANDLER_FUNCTION(58);
        EXCEPTION_HANDLER_FUNCTION(59);
        EXCEPTION_HANDLER_FUNCTION(60);
        EXCEPTION_HANDLER_FUNCTION(61);
        EXCEPTION_HANDLER_FUNCTION(62);
        EXCEPTION_HANDLER_FUNCTION(63);
    }
}

#endif

#endif